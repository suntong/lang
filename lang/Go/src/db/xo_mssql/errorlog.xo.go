package xo_mssql

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// ErrorLog represents a row from 'dbo.ErrorLog'.
type ErrorLog struct {
	ErrorLogID     int            `json:"ErrorLogID"`     // ErrorLogID
	ErrorTime      time.Time      `json:"ErrorTime"`      // ErrorTime
	UserName       string         `json:"UserName"`       // UserName
	ErrorNumber    int            `json:"ErrorNumber"`    // ErrorNumber
	ErrorSeverity  sql.NullInt64  `json:"ErrorSeverity"`  // ErrorSeverity
	ErrorState     sql.NullInt64  `json:"ErrorState"`     // ErrorState
	ErrorProcedure sql.NullString `json:"ErrorProcedure"` // ErrorProcedure
	ErrorLine      sql.NullInt64  `json:"ErrorLine"`      // ErrorLine
	ErrorMessage   string         `json:"ErrorMessage"`   // ErrorMessage
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the ErrorLog exists in the database.
func (el *ErrorLog) Exists() bool {
	return el._exists
}

// Deleted returns true when the ErrorLog has been marked for deletion from
// the database.
func (el *ErrorLog) Deleted() bool {
	return el._deleted
}

// Insert inserts the ErrorLog to the database.
func (el *ErrorLog) Insert(ctx context.Context, db DB) error {
	switch {
	case el._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case el._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO dbo.ErrorLog (` +
		`ErrorTime, UserName, ErrorNumber, ErrorSeverity, ErrorState, ErrorProcedure, ErrorLine, ErrorMessage` +
		`) VALUES (` +
		`@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8` +
		`); SELECT ID = CONVERT(BIGINT, SCOPE_IDENTITY())`
	// run
	logf(sqlstr, el.ErrorTime, el.UserName, el.ErrorNumber, el.ErrorSeverity, el.ErrorState, el.ErrorProcedure, el.ErrorLine, el.ErrorMessage)
	rows, err := db.QueryContext(ctx, sqlstr, el.ErrorTime, el.UserName, el.ErrorNumber, el.ErrorSeverity, el.ErrorState, el.ErrorProcedure, el.ErrorLine, el.ErrorMessage)
	if err != nil {
		return logerror(err)
	}
	defer rows.Close()
	// retrieve id
	var id int64
	for rows.Next() {
		if err := rows.Scan(&id); err != nil {
			return logerror(err)
		}
	}
	if err := rows.Err(); err != nil {
		return logerror(err)
	} // set primary key
	el.ErrorLogID = int(id)
	// set exists
	el._exists = true
	return nil
}

// Update updates a ErrorLog in the database.
func (el *ErrorLog) Update(ctx context.Context, db DB) error {
	switch {
	case !el._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case el._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE dbo.ErrorLog SET ` +
		`ErrorTime = @p1, UserName = @p2, ErrorNumber = @p3, ErrorSeverity = @p4, ErrorState = @p5, ErrorProcedure = @p6, ErrorLine = @p7, ErrorMessage = @p8 ` +
		`WHERE ErrorLogID = @p9`
	// run
	logf(sqlstr, el.ErrorTime, el.UserName, el.ErrorNumber, el.ErrorSeverity, el.ErrorState, el.ErrorProcedure, el.ErrorLine, el.ErrorMessage, el.ErrorLogID)
	if _, err := db.ExecContext(ctx, sqlstr, el.ErrorTime, el.UserName, el.ErrorNumber, el.ErrorSeverity, el.ErrorState, el.ErrorProcedure, el.ErrorLine, el.ErrorMessage, el.ErrorLogID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the ErrorLog to the database.
func (el *ErrorLog) Save(ctx context.Context, db DB) error {
	if el.Exists() {
		return el.Update(ctx, db)
	}
	return el.Insert(ctx, db)
}

// Upsert performs an upsert for ErrorLog.
func (el *ErrorLog) Upsert(ctx context.Context, db DB) error {
	switch {
	case el._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `MERGE dbo.ErrorLog AS t ` +
		`USING (` +
		`SELECT @p1 ErrorLogID, @p2 ErrorTime, @p3 UserName, @p4 ErrorNumber, @p5 ErrorSeverity, @p6 ErrorState, @p7 ErrorProcedure, @p8 ErrorLine, @p9 ErrorMessage ` +
		`) AS s ` +
		`ON s.ErrorLogID = t.ErrorLogID ` +
		`WHEN MATCHED THEN ` +
		`UPDATE SET ` +
		`t.ErrorTime = s.ErrorTime, t.UserName = s.UserName, t.ErrorNumber = s.ErrorNumber, t.ErrorSeverity = s.ErrorSeverity, t.ErrorState = s.ErrorState, t.ErrorProcedure = s.ErrorProcedure, t.ErrorLine = s.ErrorLine, t.ErrorMessage = s.ErrorMessage ` +
		`WHEN NOT MATCHED THEN ` +
		`INSERT (` +
		`ErrorTime, UserName, ErrorNumber, ErrorSeverity, ErrorState, ErrorProcedure, ErrorLine, ErrorMessage` +
		`) VALUES (` +
		`s.ErrorTime, s.UserName, s.ErrorNumber, s.ErrorSeverity, s.ErrorState, s.ErrorProcedure, s.ErrorLine, s.ErrorMessage` +
		`);`
	// run
	logf(sqlstr, el.ErrorLogID, el.ErrorTime, el.UserName, el.ErrorNumber, el.ErrorSeverity, el.ErrorState, el.ErrorProcedure, el.ErrorLine, el.ErrorMessage)
	if _, err := db.ExecContext(ctx, sqlstr, el.ErrorLogID, el.ErrorTime, el.UserName, el.ErrorNumber, el.ErrorSeverity, el.ErrorState, el.ErrorProcedure, el.ErrorLine, el.ErrorMessage); err != nil {
		return err
	}
	// set exists
	el._exists = true
	return nil
}

// Delete deletes the ErrorLog from the database.
func (el *ErrorLog) Delete(ctx context.Context, db DB) error {
	switch {
	case !el._exists: // doesn't exist
		return nil
	case el._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM dbo.ErrorLog ` +
		`WHERE ErrorLogID = @p1`
	// run
	logf(sqlstr, el.ErrorLogID)
	if _, err := db.ExecContext(ctx, sqlstr, el.ErrorLogID); err != nil {
		return logerror(err)
	}
	// set deleted
	el._deleted = true
	return nil
}

// ErrorLogByErrorLogID retrieves a row from 'dbo.ErrorLog' as a ErrorLog.
//
// Generated from index 'PK_ErrorLog_ErrorLogID'.
func ErrorLogByErrorLogID(ctx context.Context, db DB, errorLogID int) (*ErrorLog, error) {
	// query
	const sqlstr = `SELECT ` +
		`ErrorLogID, ErrorTime, UserName, ErrorNumber, ErrorSeverity, ErrorState, ErrorProcedure, ErrorLine, ErrorMessage ` +
		`FROM dbo.ErrorLog ` +
		`WHERE ErrorLogID = @p1`
	// run
	logf(sqlstr, errorLogID)
	el := ErrorLog{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, errorLogID).Scan(&el.ErrorLogID, &el.ErrorTime, &el.UserName, &el.ErrorNumber, &el.ErrorSeverity, &el.ErrorState, &el.ErrorProcedure, &el.ErrorLine, &el.ErrorMessage); err != nil {
		return nil, logerror(err)
	}
	return &el, nil
}
