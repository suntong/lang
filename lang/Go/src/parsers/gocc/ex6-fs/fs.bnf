!whitespace : ' ' | '\t' | '\v' | '\f' | '\r' | '\n';

_letter     : 'a'-'z' | 'A'-'Z' | '_';
_digit      : '0'-'9' ;

// -- [ Numerical literals ]

intLit      : '0' | '1'-'9' { _digit } ;

floatLit
    : _decimals '.' [ _decimals ] [ _exponent ]
    | _decimals _exponent
    | '.' _decimals [ _exponent ]
    ;

_decimals   : _digit { _digit } ;
_exponent   : ( 'e' | 'E' ) [ '+' | '-' ] _decimals ;

// -- [ String literals ]

_quotedpair : '\\' . ;

_dq_string  : '"' { _quotedpair | . } '"' ;
_sq_string  : '\'' {_quotedpair | . } '\'' ;
_lit_string : '`' { . } '`' ;

stringLit   :  _dq_string | _sq_string | _lit_string ;

// -- [ Identifiers ]

_ident : _letter { _letter | _digit | '_' } ;

ident : _ident ;

// -- [ Resolvers ]

ref : '$' [ _ident ];
selector : '.' _ident ;

// -- [ Functions ]

functionName : _ident { _ident | '.' } ;



// --- [ Exprs ]

Fscript
    : Expr
    | TernaryExpr
    ;

Expr
    : Expr "||" Expr1  
    | Expr1
    ;

Expr1
    : Expr1 "&&" Expr2  
    | Expr2
    ;

Expr2
    : Expr2 "==" Expr3  
    | Expr2 "!=" Expr3  
    | Expr2 "<"  Expr3  
    | Expr2 "<=" Expr3  
    | Expr2 ">"  Expr3  
    | Expr2 ">=" Expr3  
    | Expr3
    ;

Expr3
    : Expr3 "+" Expr4   
    | Expr3 "-" Expr4   
    | Expr4
    ;

Expr4
    : Expr4 "*" Expr5  
    | Expr4 "/" Expr5  
    | Expr4 "%" Expr5  
    | Expr5
    ;

Expr5
	: Expr6
    | "-" Expr5     
	| "!" Expr5     
    ;

Expr6
	: PrimaryExpr
	| ident "(" Args ")"     
    | functionName "(" Args ")"     
;

PrimaryExpr
    : Literal
    | "(" Expr ")"  
    ;

TernaryExpr
    : TernaryArgument "?" TernaryArgument ":" TernaryArgument        <<ast.NewTernaryExpr($0, $2, $4)>>
    ;

TernaryArgument
     :  Expr
     |  TernaryExpr
     | "(" TernaryExpr ")"                                      <<ast.NewTernaryArgument($1)>>
     ;

BoolLit    : "true"
    | "false"
    ;

NilLit
    : "nil"
    | "null"
    ;

Literal
    : intLit        
    | floatLit      
    | stringLit     
    | BoolLit       
    | NilLit        
    | ref Ref       
    ;

Ref
    : selector       
    | Indexer        
    | Ref selector   
    | Ref Indexer    
    ;
Indexer
    : "[" ident "]"     
    | "[" Fscript "]"   
    ;

Args
	: empty
	| ExprList
  ;

ExprList
	: Expr                  
	| ExprList "," Expr     
  ;
