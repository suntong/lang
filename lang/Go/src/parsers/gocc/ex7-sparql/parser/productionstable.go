// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/suntong/lang/lang/Go/src/parsers/gocc/ex7-sparql/ast"

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : QueryUnit	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `QueryUnit : SelectQuery	<< X[0], nil >>`,
		Id:         "QueryUnit",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `QueryUnit : CountQuery	<< X[0], nil >>`,
		Id:         "QueryUnit",
		NTType:     1,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `QueryUnit : UpdateQuery	<< X[0], nil >>`,
		Id:         "QueryUnit",
		NTType:     1,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `QueryUnit : VersionsQuery	<< X[0], nil >>`,
		Id:         "QueryUnit",
		NTType:     1,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SelectQuery : SelectClause DatasetClause WhereClause TimeClause	<< ast.NewQueryMulti(X[0], X[1], X[2], X[3], false) >>`,
		Id:         "SelectQuery",
		NTType:     2,
		Index:      5,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewQueryMulti(X[0], X[1], X[2], X[3], false)
		},
	},
	ProdTabEntry{
		String: `SelectQuery : SelectClause DatasetClause WhereClause	<< ast.NewQueryMulti(X[0], X[1], X[2], nil, false) >>`,
		Id:         "SelectQuery",
		NTType:     2,
		Index:      6,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewQueryMulti(X[0], X[1], X[2], nil, false)
		},
	},
	ProdTabEntry{
		String: `CountQuery : CountClause DatasetClause WhereClause TimeClause	<< ast.NewQueryMulti(X[0], X[1], X[2], X[3], true) >>`,
		Id:         "CountQuery",
		NTType:     3,
		Index:      7,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewQueryMulti(X[0], X[1], X[2], X[3], true)
		},
	},
	ProdTabEntry{
		String: `CountQuery : CountClause DatasetClause WhereClause	<< ast.NewQueryMulti(X[0], X[1], X[2], nil, true) >>`,
		Id:         "CountQuery",
		NTType:     3,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewQueryMulti(X[0], X[1], X[2], nil, true)
		},
	},
	ProdTabEntry{
		String: `UpdateQuery : InsertClause DatasetClauseInsert WhereClause	<< ast.NewInsertQueryMulti(X[0], X[1], X[2], false) >>`,
		Id:         "UpdateQuery",
		NTType:     4,
		Index:      9,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInsertQueryMulti(X[0], X[1], X[2], false)
		},
	},
	ProdTabEntry{
		String: `VersionsQuery : "LIST" "NAMES"	<< ast.NewVersionQueryNames() >>`,
		Id:         "VersionsQuery",
		NTType:     5,
		Index:      10,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewVersionQueryNames()
		},
	},
	ProdTabEntry{
		String: `VersionsQuery : "LIST" "VERSIONS" TimeClause VersionGraphSelection LimitClause	<< ast.NewVersionQuery(X[2], X[3], X[4]) >>`,
		Id:         "VersionsQuery",
		NTType:     5,
		Index:      11,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewVersionQuery(X[2], X[3], X[4])
		},
	},
	ProdTabEntry{
		String: `VersionGraphSelection : "FOR" DBlist	<< ast.NewFromClause(X[1]) >>`,
		Id:         "VersionGraphSelection",
		NTType:     6,
		Index:      12,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFromClause(X[1])
		},
	},
	ProdTabEntry{
		String: `VersionGraphSelection : "FOR" "*"	<< ast.NewAllFromClause() >>`,
		Id:         "VersionGraphSelection",
		NTType:     6,
		Index:      13,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAllFromClause()
		},
	},
	ProdTabEntry{
		String: `VersionGraphSelection : empty	<< ast.NewAllFromClause() >>`,
		Id:         "VersionGraphSelection",
		NTType:     6,
		Index:      14,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAllFromClause()
		},
	},
	ProdTabEntry{
		String: `LimitClause : "LIMIT" Number	<< X[1], nil >>`,
		Id:         "LimitClause",
		NTType:     7,
		Index:      15,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `LimitClause : empty	<< -1, nil >>`,
		Id:         "LimitClause",
		NTType:     7,
		Index:      16,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return -1, nil
		},
	},
	ProdTabEntry{
		String: `SelectClause : "SELECT" "*"	<< ast.NewAllSelectClause() >>`,
		Id:         "SelectClause",
		NTType:     8,
		Index:      17,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAllSelectClause()
		},
	},
	ProdTabEntry{
		String: `SelectClause : "SELECT" Varlist	<< ast.NewSelectClause(X[1]) >>`,
		Id:         "SelectClause",
		NTType:     8,
		Index:      18,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewSelectClause(X[1])
		},
	},
	ProdTabEntry{
		String: `InsertClause : "INSERT" "{" TriplesBlock "}"	<< ast.NewInsertClause(X[2]) >>`,
		Id:         "InsertClause",
		NTType:     9,
		Index:      19,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInsertClause(X[2])
		},
	},
	ProdTabEntry{
		String: `InsertClause : "INSERT" "{" TriplesBlock "." "}"	<< ast.NewInsertClause(X[2]) >>`,
		Id:         "InsertClause",
		NTType:     9,
		Index:      20,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInsertClause(X[2])
		},
	},
	ProdTabEntry{
		String: `CountClause : "COUNT" "*"	<< ast.NewAllSelectClause() >>`,
		Id:         "CountClause",
		NTType:     10,
		Index:      21,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAllSelectClause()
		},
	},
	ProdTabEntry{
		String: `CountClause : "COUNT" Varlist	<< ast.NewSelectClause(X[1]) >>`,
		Id:         "CountClause",
		NTType:     10,
		Index:      22,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewSelectClause(X[1])
		},
	},
	ProdTabEntry{
		String: `Varlist : Var	<< ast.NewVarList(X[0]) >>`,
		Id:         "Varlist",
		NTType:     11,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewVarList(X[0])
		},
	},
	ProdTabEntry{
		String: `Varlist : Varlist Var	<< ast.AppendVar(X[0], X[1]) >>`,
		Id:         "Varlist",
		NTType:     11,
		Index:      24,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendVar(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `DBlist : String	<< ast.NewStringList(X[0]) >>`,
		Id:         "DBlist",
		NTType:     12,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewStringList(X[0])
		},
	},
	ProdTabEntry{
		String: `DBlist : DBlist String	<< ast.AppendString(X[0], X[1]) >>`,
		Id:         "DBlist",
		NTType:     12,
		Index:      26,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendString(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `String : string	<< ast.ParseString(X[0]) >>`,
		Id:         "String",
		NTType:     13,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ParseString(X[0])
		},
	},
	ProdTabEntry{
		String: `Var : var	<< ast.ParseString(X[0]) >>`,
		Id:         "Var",
		NTType:     14,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ParseString(X[0])
		},
	},
	ProdTabEntry{
		String: `Number : string	<< ast.ParseNumber(X[0]) >>`,
		Id:         "Number",
		NTType:     15,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ParseNumber(X[0])
		},
	},
	ProdTabEntry{
		String: `DatasetClause : "FROM" DBlist	<< ast.NewFromClause(X[1]) >>`,
		Id:         "DatasetClause",
		NTType:     16,
		Index:      30,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFromClause(X[1])
		},
	},
	ProdTabEntry{
		String: `DatasetClause : "FROM" "*"	<< ast.NewAllFromClause() >>`,
		Id:         "DatasetClause",
		NTType:     16,
		Index:      31,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAllFromClause()
		},
	},
	ProdTabEntry{
		String: `DatasetClause : empty	<< ast.NewAllFromClause() >>`,
		Id:         "DatasetClause",
		NTType:     16,
		Index:      32,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAllFromClause()
		},
	},
	ProdTabEntry{
		String: `DatasetClauseInsert : "TO" DBlist	<< ast.NewFromClause(X[1]) >>`,
		Id:         "DatasetClauseInsert",
		NTType:     17,
		Index:      33,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFromClause(X[1])
		},
	},
	ProdTabEntry{
		String: `DatasetClauseInsert : "TO" "*"	<< ast.NewAllFromClause() >>`,
		Id:         "DatasetClauseInsert",
		NTType:     17,
		Index:      34,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAllFromClause()
		},
	},
	ProdTabEntry{
		String: `DatasetClauseInsert : empty	<< ast.NewAllFromClause() >>`,
		Id:         "DatasetClauseInsert",
		NTType:     17,
		Index:      35,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAllFromClause()
		},
	},
	ProdTabEntry{
		String: `TimeClause : "AT" String	<< ast.NewTimeClause(ast.AT, X[1]) >>`,
		Id:         "TimeClause",
		NTType:     18,
		Index:      36,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewTimeClause(ast.AT, X[1])
		},
	},
	ProdTabEntry{
		String: `TimeClause : "BEFORE" String	<< ast.NewTimeClause(ast.BEFORE, X[1]) >>`,
		Id:         "TimeClause",
		NTType:     18,
		Index:      37,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewTimeClause(ast.BEFORE, X[1])
		},
	},
	ProdTabEntry{
		String: `TimeClause : "AFTER" String	<< ast.NewTimeClause(ast.AFTER, X[1]) >>`,
		Id:         "TimeClause",
		NTType:     18,
		Index:      38,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewTimeClause(ast.AFTER, X[1])
		},
	},
	ProdTabEntry{
		String: `TimeClause : empty	<< ast.NewTimeClause(ast.AT, "now") >>`,
		Id:         "TimeClause",
		NTType:     18,
		Index:      39,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewTimeClause(ast.AT, "now")
		},
	},
	ProdTabEntry{
		String: `WhereClause : "WHERE" "{" "}"	<< ast.NewWhereClause([]ast.Triple{}) >>`,
		Id:         "WhereClause",
		NTType:     19,
		Index:      40,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewWhereClause([]ast.Triple{})
		},
	},
	ProdTabEntry{
		String: `WhereClause : "WHERE" "{" TriplesBlock "}"	<< ast.NewWhereClause(X[2]) >>`,
		Id:         "WhereClause",
		NTType:     19,
		Index:      41,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewWhereClause(X[2])
		},
	},
	ProdTabEntry{
		String: `WhereClause : "WHERE" "{" TriplesBlock "." "}"	<< ast.NewWhereClause(X[2]) >>`,
		Id:         "WhereClause",
		NTType:     19,
		Index:      42,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewWhereClause(X[2])
		},
	},
	ProdTabEntry{
		String: `WhereClause : "WHERE" "{" TriplesBlock RestOfWhereList "}"	<< ast.NewWhereClauseWithGraphGroup(X[2], X[3]) >>`,
		Id:         "WhereClause",
		NTType:     19,
		Index:      43,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewWhereClauseWithGraphGroup(X[2], X[3])
		},
	},
	ProdTabEntry{
		String: `WhereClause : "WHERE" "{" TriplesBlock "." RestOfWhereList "}"	<< ast.NewWhereClauseWithGraphGroup(X[2], X[4]) >>`,
		Id:         "WhereClause",
		NTType:     19,
		Index:      44,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewWhereClauseWithGraphGroup(X[2], X[4])
		},
	},
	ProdTabEntry{
		String: `WhereClause : "WHERE" "{" RestOfWhereList "}"	<< ast.NewWhereClauseGraphGroup(X[2]) >>`,
		Id:         "WhereClause",
		NTType:     19,
		Index:      45,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewWhereClauseGraphGroup(X[2])
		},
	},
	ProdTabEntry{
		String: `WhereClause : empty	<< ast.NewWhereClause([]ast.Triple{}) >>`,
		Id:         "WhereClause",
		NTType:     19,
		Index:      46,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewWhereClause([]ast.Triple{})
		},
	},
	ProdTabEntry{
		String: `TriplesBlock : Triple	<< ast.NewTripleBlock(X[0]) >>`,
		Id:         "TriplesBlock",
		NTType:     20,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewTripleBlock(X[0])
		},
	},
	ProdTabEntry{
		String: `TriplesBlock : TriplesBlock "." Triple	<< ast.AppendTripleBlock(X[0], X[2]) >>`,
		Id:         "TriplesBlock",
		NTType:     20,
		Index:      48,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendTripleBlock(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Triple : VarOrTerm Path VarOrTerm	<< ast.NewTriple(X[0], X[1], X[2]) >>`,
		Id:         "Triple",
		NTType:     21,
		Index:      49,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewTriple(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `VarOrTerm : Var	<< ast.NewURI(X[0]) >>`,
		Id:         "VarOrTerm",
		NTType:     22,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewURI(X[0])
		},
	},
	ProdTabEntry{
		String: `VarOrTerm : GraphTerm	<< ast.NewURI(X[0]) >>`,
		Id:         "VarOrTerm",
		NTType:     22,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewURI(X[0])
		},
	},
	ProdTabEntry{
		String: `GraphTerm : uri	<< ast.ParseString(X[0]) >>`,
		Id:         "GraphTerm",
		NTType:     23,
		Index:      52,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ParseString(X[0])
		},
	},
	ProdTabEntry{
		String: `GraphTerm : quotedstring	<< ast.ParseQuotedString(X[0]) >>`,
		Id:         "GraphTerm",
		NTType:     23,
		Index:      53,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ParseQuotedString(X[0])
		},
	},
	ProdTabEntry{
		String: `GraphTerm : url	<< ast.ParseString(X[0]) >>`,
		Id:         "GraphTerm",
		NTType:     23,
		Index:      54,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ParseString(X[0])
		},
	},
	ProdTabEntry{
		String: `Path : PathSequence	<< X[0], nil >>`,
		Id:         "Path",
		NTType:     24,
		Index:      55,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Path : Path "|" PathSequence	<<  >>`,
		Id:         "Path",
		NTType:     24,
		Index:      56,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Path : Var	<< ast.PathFromVar(X[0]) >>`,
		Id:         "Path",
		NTType:     24,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.PathFromVar(X[0])
		},
	},
	ProdTabEntry{
		String: `PathSequence : PathElt	<< ast.NewPathSequence(X[0]) >>`,
		Id:         "PathSequence",
		NTType:     25,
		Index:      58,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewPathSequence(X[0])
		},
	},
	ProdTabEntry{
		String: `PathSequence : PathSequence "/" PathElt	<< ast.AppendPathSequence(X[0], X[2]) >>`,
		Id:         "PathSequence",
		NTType:     25,
		Index:      59,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendPathSequence(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `PathElt : PathPrimary PathMod	<< ast.AddPathMod(X[0], X[1]) >>`,
		Id:         "PathElt",
		NTType:     26,
		Index:      60,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AddPathMod(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `PathElt : PathPrimary	<< X[0], nil >>`,
		Id:         "PathElt",
		NTType:     26,
		Index:      61,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PathPrimary : uri	<< ast.NewPathPattern(X[0]) >>`,
		Id:         "PathPrimary",
		NTType:     27,
		Index:      62,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewPathPattern(X[0])
		},
	},
	ProdTabEntry{
		String: `PathPrimary : "a"	<< ast.NewPathPattern(X[0]) >>`,
		Id:         "PathPrimary",
		NTType:     27,
		Index:      63,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewPathPattern(X[0])
		},
	},
	ProdTabEntry{
		String: `PathPrimary : url	<< ast.NewPathPattern(X[0]) >>`,
		Id:         "PathPrimary",
		NTType:     27,
		Index:      64,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewPathPattern(X[0])
		},
	},
	ProdTabEntry{
		String: `PathPrimary : "(" Path ")"	<< X[1], nil >>`,
		Id:         "PathPrimary",
		NTType:     27,
		Index:      65,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `PathMod : "?"	<< ast.Pattern(ast.PATTERN_ZERO_ONE), nil >>`,
		Id:         "PathMod",
		NTType:     28,
		Index:      66,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Pattern(ast.PATTERN_ZERO_ONE), nil
		},
	},
	ProdTabEntry{
		String: `PathMod : "*"	<< ast.Pattern(ast.PATTERN_ZERO_PLUS), nil >>`,
		Id:         "PathMod",
		NTType:     28,
		Index:      67,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Pattern(ast.PATTERN_ZERO_PLUS), nil
		},
	},
	ProdTabEntry{
		String: `PathMod : "+"	<< ast.Pattern(ast.PATTERN_ONE_PLUS), nil >>`,
		Id:         "PathMod",
		NTType:     28,
		Index:      68,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.Pattern(ast.PATTERN_ONE_PLUS), nil
		},
	},
	ProdTabEntry{
		String: `RestOfWhereList : RestOfWhere	<< X[0], nil >>`,
		Id:         "RestOfWhereList",
		NTType:     29,
		Index:      69,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `RestOfWhereList : RestOfWhereList RestOfWhere	<< ast.MergeGraphGroups(X[0], X[1]) >>`,
		Id:         "RestOfWhereList",
		NTType:     29,
		Index:      70,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.MergeGraphGroups(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `RestOfWhere : GraphPatternNotTriples Joiner TriplesBlock Joiner	<< ast.AddTriplesToGraphGroup(X[0], X[2]) >>`,
		Id:         "RestOfWhere",
		NTType:     30,
		Index:      71,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AddTriplesToGraphGroup(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `RestOfWhere : GraphPatternNotTriples Joiner	<< X[0], nil >>`,
		Id:         "RestOfWhere",
		NTType:     30,
		Index:      72,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Joiner : "."	<<  >>`,
		Id:         "Joiner",
		NTType:     31,
		Index:      73,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Joiner : empty	<<  >>`,
		Id:         "Joiner",
		NTType:     31,
		Index:      74,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `GraphPatternNotTriples : GroupGraphPattern	<< X[0], nil >>`,
		Id:         "GraphPatternNotTriples",
		NTType:     32,
		Index:      75,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `GraphPatternNotTriples : GraphPatternNotTriples "UNION" GroupGraphPattern	<< ast.GraphGroupUnion(X[0], X[2]) >>`,
		Id:         "GraphPatternNotTriples",
		NTType:     32,
		Index:      76,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.GraphGroupUnion(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `GroupGraphPattern : "{" GroupGraphPatternSub Joiner "}"	<< X[1], nil >>`,
		Id:         "GroupGraphPattern",
		NTType:     33,
		Index:      77,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `GroupGraphPatternSub : TriplesBlock	<< ast.GraphGroupFromTriples(X[0]) >>`,
		Id:         "GroupGraphPatternSub",
		NTType:     34,
		Index:      78,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.GraphGroupFromTriples(X[0])
		},
	},
	ProdTabEntry{
		String: `GroupGraphPatternSub : GraphPatternNotTriples "." TriplesBlock	<< ast.AddTriplesToGraphGroup(X[0], X[2]) >>`,
		Id:         "GroupGraphPatternSub",
		NTType:     34,
		Index:      79,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AddTriplesToGraphGroup(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `GroupGraphPatternSub : GroupGraphPatternSub GraphPatternNotTriples "." TriplesBlock	<<  >>`,
		Id:         "GroupGraphPatternSub",
		NTType:     34,
		Index:      80,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
}
