// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/suntong/lang/lang/Go/src/parsers/gocc/ex7-sparql/token"
)

const (
	NoState    = -1
	NumStates  = 97
	NumSymbols = 110
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '?'
1: ':'
2: '<'
3: '>'
4: 'L'
5: 'I'
6: 'S'
7: 'T'
8: 'N'
9: 'A'
10: 'M'
11: 'E'
12: 'S'
13: 'V'
14: 'E'
15: 'R'
16: 'S'
17: 'I'
18: 'O'
19: 'N'
20: 'S'
21: 'F'
22: 'O'
23: 'R'
24: '*'
25: 'L'
26: 'I'
27: 'M'
28: 'I'
29: 'T'
30: 'S'
31: 'E'
32: 'L'
33: 'E'
34: 'C'
35: 'T'
36: 'I'
37: 'N'
38: 'S'
39: 'E'
40: 'R'
41: 'T'
42: '{'
43: '}'
44: '.'
45: 'C'
46: 'O'
47: 'U'
48: 'N'
49: 'T'
50: 'F'
51: 'R'
52: 'O'
53: 'M'
54: 'T'
55: 'O'
56: 'A'
57: 'T'
58: 'B'
59: 'E'
60: 'F'
61: 'O'
62: 'R'
63: 'E'
64: 'A'
65: 'F'
66: 'T'
67: 'E'
68: 'R'
69: 'W'
70: 'H'
71: 'E'
72: 'R'
73: 'E'
74: '|'
75: '/'
76: 'a'
77: '('
78: ')'
79: '?'
80: '+'
81: 'U'
82: 'N'
83: 'I'
84: 'O'
85: 'N'
86: '"'
87: '_'
88: '-'
89: '_'
90: '\'
91: '-'
92: '#'
93: '%'
94: '$'
95: '@'
96: '_'
97: '-'
98: ' '
99: ':'
100: '"'
101: '"'
102: '\t'
103: '\n'
104: '\r'
105: ' '
106: 'A'-'Z'
107: 'a'-'z'
108: '0'-'9'
109: .
*/
