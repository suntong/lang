// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"fmt"
	"io/ioutil"
	"unicode/utf8"

	"github.com/suntong/lang/lang/Go/src/parsers/gocc/grm2-gocc1/util"
	"github.com/suntong/lang/lang/Go/src/parsers/gocc/grm2-gocc1/token"
)

const (
	NoState    = -1
	NumStates  = 107
	NumSymbols = 77
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	fmt.Printf("Lexer.Scan() pos=%d\n", l.pos)
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		fmt.Printf("\tpos=%d, line=%d, col=%d, state=%d\n", l.pos, l.line, l.column, state)
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		fmt.Printf("\tS%d, : tok=%s, rune == %s(%x), next state == %d\n", state, token.TokMap.Id(tok.Type), util.RuneToString(rune1), rune1, nextState)
		fmt.Printf("\t\tpos=%d, size=%d, start=%d, end=%d\n", l.pos, size, start, end)
		if nextState != -1 {
			fmt.Printf("\t\taction:%s\n", ActTab[nextState].String())
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context
	fmt.Printf("Token at %s: %s \"%s\"\n", tok.String(), token.TokMap.Id(tok.Type), tok.Lit)

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '<'
1: '<'
2: '>'
3: '>'
4: '''
5: '''
6: '!'
7: '_'
8: ':'
9: ';'
10: '|'
11: '.'
12: '-'
13: '['
14: ']'
15: '{'
16: '}'
17: '('
18: ')'
19: 'e'
20: 'r'
21: 'r'
22: 'o'
23: 'r'
24: 'e'
25: 'm'
26: 'p'
27: 't'
28: 'y'
29: '/'
30: '/'
31: '\n'
32: '/'
33: '*'
34: '*'
35: '*'
36: '/'
37: 'A'
38: 'Z'
39: 'a'
40: 'z'
41: '_'
42: '\'
43: '\'
44: 'x'
45: '\'
46: 'u'
47: '\'
48: 'U'
49: '\'
50: 'a'
51: 'b'
52: 'f'
53: 'n'
54: 'r'
55: 't'
56: 'v'
57: '\'
58: '''
59: '"'
60: '`'
61: '`'
62: '"'
63: '"'
64: '_'
65: ' '
66: '\t'
67: '\n'
68: '\r'
69: 'a'-'z'
70: 'A'-'Z'
71: '0'-'9'
72: '0'-'7'
73: '0'-'9'
74: 'A'-'F'
75: 'a'-'f'
76: .
*/
