// Code generated by gocc; DO NOT EDIT.

package parser

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Grammar	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Grammar : LexicalPart SyntaxPart	<<  >>`,
		Id:         "Grammar",
		NTType:     1,
		Index:      1,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Grammar : LexicalPart	<<  >>`,
		Id:         "Grammar",
		NTType:     1,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Grammar : SyntaxPart	<<  >>`,
		Id:         "Grammar",
		NTType:     1,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexicalPart : LexProductions	<<  >>`,
		Id:         "LexicalPart",
		NTType:     2,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexProductions : LexProduction	<<  >>`,
		Id:         "LexProductions",
		NTType:     3,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexProductions : LexProductions LexProduction	<<  >>`,
		Id:         "LexProductions",
		NTType:     3,
		Index:      6,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexProduction : tokId ":" LexPattern ";"	<<  >>`,
		Id:         "LexProduction",
		NTType:     4,
		Index:      7,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexProduction : regDefId ":" LexPattern ";"	<<  >>`,
		Id:         "LexProduction",
		NTType:     4,
		Index:      8,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexProduction : ignoredTokId ":" LexPattern ";"	<<  >>`,
		Id:         "LexProduction",
		NTType:     4,
		Index:      9,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexPattern : LexAlt	<<  >>`,
		Id:         "LexPattern",
		NTType:     5,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexPattern : LexAlt "|" LexPattern	<<  >>`,
		Id:         "LexPattern",
		NTType:     5,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexAlt : LexTerm	<<  >>`,
		Id:         "LexAlt",
		NTType:     6,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexAlt : LexAlt LexTerm	<<  >>`,
		Id:         "LexAlt",
		NTType:     6,
		Index:      13,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexTerm : "."	<<  >>`,
		Id:         "LexTerm",
		NTType:     7,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexTerm : char_lit	<<  >>`,
		Id:         "LexTerm",
		NTType:     7,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexTerm : char_lit "-" char_lit	<<  >>`,
		Id:         "LexTerm",
		NTType:     7,
		Index:      16,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexTerm : regDefId	<<  >>`,
		Id:         "LexTerm",
		NTType:     7,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexTerm : "[" LexPattern "]"	<<  >>`,
		Id:         "LexTerm",
		NTType:     7,
		Index:      18,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexTerm : "{" LexPattern "}"	<<  >>`,
		Id:         "LexTerm",
		NTType:     7,
		Index:      19,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LexTerm : "(" LexPattern ")"	<<  >>`,
		Id:         "LexTerm",
		NTType:     7,
		Index:      20,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxPart : FileHeader SyntaxProdList	<<  >>`,
		Id:         "SyntaxPart",
		NTType:     8,
		Index:      21,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxPart : SyntaxProdList	<<  >>`,
		Id:         "SyntaxPart",
		NTType:     8,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FileHeader : g_sdt_lit	<<  >>`,
		Id:         "FileHeader",
		NTType:     9,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxProdList : SyntaxProduction	<<  >>`,
		Id:         "SyntaxProdList",
		NTType:     10,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxProdList : SyntaxProdList SyntaxProduction	<<  >>`,
		Id:         "SyntaxProdList",
		NTType:     10,
		Index:      25,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxProduction : prodId ":" Alternatives ";"	<<  >>`,
		Id:         "SyntaxProduction",
		NTType:     11,
		Index:      26,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Alternatives : SyntaxBody	<<  >>`,
		Id:         "Alternatives",
		NTType:     12,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Alternatives : Alternatives "|" SyntaxBody	<<  >>`,
		Id:         "Alternatives",
		NTType:     12,
		Index:      28,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : Symbols	<<  >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : Symbols g_sdt_lit	<<  >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      30,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : "error"	<<  >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      31,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : "error" Symbols	<<  >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      32,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : "error" Symbols g_sdt_lit	<<  >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      33,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SyntaxBody : "empty"	<<  >>`,
		Id:         "SyntaxBody",
		NTType:     13,
		Index:      34,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Symbols : Symbol	<<  >>`,
		Id:         "Symbols",
		NTType:     14,
		Index:      35,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Symbols : Symbols Symbol	<<  >>`,
		Id:         "Symbols",
		NTType:     14,
		Index:      36,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Symbol : prodId	<<  >>`,
		Id:         "Symbol",
		NTType:     15,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Symbol : tokId	<<  >>`,
		Id:         "Symbol",
		NTType:     15,
		Index:      38,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Symbol : string_lit	<<  >>`,
		Id:         "Symbol",
		NTType:     15,
		Index:      39,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
}
