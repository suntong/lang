package main

// based on Slice-2D-islands.go & Slice-2D-minesweeper.go

import (
	"fmt"

	"github.com/suntong/testing"
)

func main() {
	var t *testing.T = testing.NewT()
	Test_Problem(t)
	t.Report()
}

//==========================================================================
// tests

type question struct {
	para
	ans
}

// para 是参数
// one 代表第一个参数
type para struct {
	one [][]int
}

// ans 是答案
// one 代表第一个答案
type ans struct {
	one [][]int
}

func Test_Problem(t *testing.T) {

	qs := []question{

		{
			para{[][]int{
				{1, 1, 1, 1},
				{1, 1, 0, 1},
				{1, 1, 0, 0},
				{0, 0, 0, 0},
			}},
			ans{[][]int{
				{-1, -1, -1, -1},
				{-1, -1, 6, -1},
				{-1, -1, 3, 1},
				{2, 2, 1, 0},
			}},
		},

		{
			para{[][]int{
				{1, 0, 0, 0},
				{1, 0, 0, 0},
				{0, 1, 0, 0},
				{0, 0, 1, 1},
			}},
			ans{[][]int{
				{-1, 2, 0, 0},
				{-1, 3, 1, 0},
				{2, -1, 3, 2},
				{1, 2, -1, -1},
			}},
		},

		{
			para{[][]int{
				{1, 1, 1, 1, 1, 1, 1, 0},
				{1, 0, 0, 0, 0, 1, 1, 0},
				{1, 0, 1, 0, 1, 1, 1, 0},
				{1, 0, 0, 0, 0, 1, 0, 1},
				{1, 1, 1, 1, 1, 1, 1, 0},
			}},
			ans{[][]int{
				{-1, -1, -1, -1, -1, -1, -1, 2},
				{-1, 6, 4, 5, 6, -1, -1, 3},
				{-1, 4, -1, 2, -1, -1, -1, 3},
				{-1, 6, 4, 5, 6, -1, 6, -1},
				{-1, -1, -1, -1, -1, -1, -1, 2},
			}},
		},

		{
			para{[][]int{
				{0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
				{0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
				{0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
			}},
			ans{[][]int{
				{0, 1, -1, 1, 0, 0, 2, -1, 4, 2, 1, 0, 0},
				{1, 3, 3, 3, 1, 1, 2, -1, -1, -1, 1, 0, 0},
				{2, -1, -1, 3, -1, 3, 2, 3, 4, 4, 2, 1, 0},
				{3, -1, 4, 4, -1, -1, 2, 2, -1, 5, -1, 2, 0},
				{2, -1, 2, 2, -1, -1, 2, 2, -1, -1, -1, 3, 0},
				{1, 1, 1, 1, 2, 2, 2, 3, 5, 6, -1, 2, 0},
				{0, 0, 0, 0, 0, 0, 2, -1, -1, -1, 2, 1, 0},
				{0, 0, 0, 0, 0, 0, 2, -1, -1, 3, 1, 0, 0},
			}},
		},

		{
			para{[][]int{
				{0, 0, 1, 0, 0},
				{0, 1, 0, 1, 0},
				{0, 1, 1, 1, 0},
			}},
			ans{[][]int{
				{1, 2, -1, 2, 1},
				{2, -1, 6, -1, 2},
				{2, -1, -1, -1, 2},
			}},
		},

		{
			para{[][]int{
				{1, 1, 1, 1, 1, 1, 1},
				{1, 0, 0, 0, 0, 0, 1},
				{1, 0, 1, 1, 1, 0, 1},
				{1, 0, 1, 0, 1, 0, 1},
				{1, 0, 1, 1, 1, 0, 1},
				{1, 0, 0, 0, 0, 0, 1},
				{1, 1, 1, 1, 1, 1, 1},
			}},
			ans{[][]int{
				{-1, -1, -1, -1, -1, -1, -1},
				{-1, 6, 5, 6, 5, 6, -1},
				{-1, 5, -1, -1, -1, 5, -1},
				{-1, 6, -1, 8, -1, 6, -1},
				{-1, 5, -1, -1, -1, 5, -1},
				{-1, 6, 5, 6, 5, 6, -1},
				{-1, -1, -1, -1, -1, -1, -1},
			}},
		},
	}

	fmt.Printf("------------------------Leetcode Problem ------------------------\n")

	for _, q := range qs {
		a, p := q.ans, q.para
		fmt.Printf("\t%v\n\t%v\n\n", a.one, calcMines(p.one))
	}
}

var dir = [][]int{
	{-1, -1},
	{-1, 0},
	{-1, 1},
	{0, 1},
	{1, 1},
	{1, 0},
	{1, -1},
	{0, -1},
}

func calcMines(grid [][]int) [][]int {
	x, y := len(grid[0]), len(grid)
	// Create a new 2D grid
	res := make([][]int, y)
	for i := 0; i < y; i++ {
		res[i] = make([]int, x)
	}

	for i, row := range grid {
		for j := range row {
			if grid[i][j] == 1 {
				res[i][j] = -1
				for _, d := range dir {
					nx, ny := i+d[0], j+d[1]
					if isInGrid(grid, nx, ny) && res[nx][ny] >= 0 {
						res[nx][ny]++
					}
				}
			}
		}
	}
	return res
}

func isInGrid(grid [][]int, x, y int) bool {
	return x >= 0 && x < len(grid) && y >= 0 && y < len(grid[0])
}
